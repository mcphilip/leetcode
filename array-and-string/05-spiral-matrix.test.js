const {spiralOrder} = require('./05-spiral-matrix');

describe('spiralOrder', () => {
    it('should handle 3 x 3', () => {
        expect(spiralOrder([[1,2,3],[4,5,6],[7,8,9]])).toEqual([1,2,3,6,9,8,7,4,5]);
    });
    it('should handle 4 x 4', () => {
        expect(spiralOrder([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]])).toEqual([1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10]);
    });
    it('should handle 2 x 2', () => {
        expect(spiralOrder([[1,2],[3,4]])).toEqual([1,2,4,3]);
    });
    it('should handle 3 x 4', () => {
        expect(spiralOrder([[1,2,3,4],[5,6,7,8],[9,10,11,12]])).toEqual([1,2,3,4,8,12,11,10,9,5,6,7]);
    });
    it('should handle 4 x 3', () => {
        expect(spiralOrder([[1,2,3],[4,5,6],[7,8,9],[10,11,12]])).toEqual([1,2,3,6,9,12,11,10,7,4,5,8]);
    });

    it('should handle 1 x N', () => {
        expect(spiralOrder([[1,2,3,4,5,6]])).toEqual([1,2,3,4,5,6]);
    });
    it('should handle N x 1', () => {
        expect(spiralOrder([[1],[2],[3],[1],[2],[3]])).toEqual([1,2,3,1,2,3]);
    });
    it('should handle 10 x 10', () => {
        expect(spiralOrder([[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10]]))
        .toEqual([1,2,3,4,5,6,7,8,9,10,10,10,10,10,10,10,10,10,10,9,8,7,6,5,4,3,2,1,1,1,1,1,1,1,1,1,2,3,4,5,6,7,8,9,9,9,9,9,9,9,9,8,7,6,5,4,3,2,2,2,2,2,2,2,3,4,5,6,7,8,8,8,8,8,8,7,6,5,4,3,3,3,3,3,4,5,6,7,7,7,7,6,5,4,4,4,5,6,6,5]);
    });
    it('should handle 6 x 6', () => {
        expect(spiralOrder([[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6]]))
        .toEqual([1,2,3,4,5,6,6,6,6,6,6,6,6,6,6,5,4,3,2,1,1,1,1,1,1,1,1,1,2,3,4,5,5,5,5,5,5,5,5,4,3,2,2,2,2,2,2,2,3,4,4,4,4,4,4,3,3,3,3,3]);
    })
});
